{
  "version": 3,
  "sources": ["../src/uWebSocketClient.ts"],
  "sourcesContent": ["import EventEmitter from 'events';\nimport uWebSockets from 'uWebSockets.js';\n\nimport { getMessageBytes, Protocol, Client, ClientState, ISendOptions, logger, debugMessage } from '@colyseus/core';\nimport { Schema } from '@colyseus/schema';\n\nexport class uWebSocketWrapper extends EventEmitter {\n  constructor(public ws: uWebSockets.WebSocket<any>) {\n    super();\n  }\n}\n\nexport enum ReadyState {\n  CONNECTING = 0,\n  OPEN = 1,\n  CLOSING = 2,\n  CLOSED = 3,\n}\n\nexport class uWebSocketClient implements Client {\n  public sessionId: string;\n  public state: ClientState = ClientState.JOINING;\n  public readyState: number = ReadyState.OPEN;\n  public _enqueuedMessages: any[] = [];\n  public _afterNextPatchQueue;\n  public _reconnectionToken: string;\n\n  constructor(\n    public id: string,\n    public _ref: uWebSocketWrapper,\n  ) {\n    this.sessionId = id;\n\n    _ref.on('close', () => this.readyState = ReadyState.CLOSED);\n  }\n\n  get ref() { return this._ref; }\n  set ref(_ref: uWebSocketWrapper) {\n    this._ref = _ref;\n    this.readyState = ReadyState.OPEN;\n  }\n\n  public sendBytes(type: any, bytes?: any | ISendOptions, options?: ISendOptions) {\n    debugMessage(\"send bytes(to %s): '%s' -> %j\", this.sessionId, type, bytes);\n\n    this.enqueueRaw(\n      getMessageBytes.raw(Protocol.ROOM_DATA_BYTES, type, undefined, bytes),\n      options,\n    );\n  }\n\n  public send(messageOrType: any, messageOrOptions?: any | ISendOptions, options?: ISendOptions) {\n    debugMessage(\"send(to %s): '%s' -> %O\", this.sessionId, messageOrType, messageOrOptions);\n\n    this.enqueueRaw(\n      (messageOrType instanceof Schema)\n        ? getMessageBytes[Protocol.ROOM_DATA_SCHEMA](messageOrType)\n        : getMessageBytes.raw(Protocol.ROOM_DATA, messageOrType, messageOrOptions),\n      options,\n    );\n  }\n\n  public enqueueRaw(data: ArrayLike<number>, options?: ISendOptions) {\n    // use room's afterNextPatch queue\n    if (options?.afterNextPatch) {\n      this._afterNextPatchQueue.push([this, arguments]);\n      return;\n    }\n\n    if (this.state === ClientState.JOINING) {\n      // sending messages during `onJoin`.\n      // - the client-side cannot register \"onMessage\" callbacks at this point.\n      // - enqueue the messages to be send after JOIN_ROOM message has been sent\n      this._enqueuedMessages.push(data);\n      return;\n    }\n\n    this.raw(data, options);\n  }\n\n  public raw(data: ArrayLike<number>, options?: ISendOptions, cb?: (err?: Error) => void) {\n    // skip if client not open\n    if (this.readyState !== ReadyState.OPEN) {\n      return;\n    }\n\n    this._ref.ws.send(new Uint8Array(data), true, false);\n  }\n\n  public error(code: number, message: string = '', cb?: (err?: Error) => void) {\n    this.raw(getMessageBytes[Protocol.ERROR](code, message));\n\n    // delay callback execution - uWS doesn't acknowledge when the message was sent\n    // (same API as \"ws\" transport)\n    setTimeout(cb, 1);\n  }\n\n  public leave(code?: number, data?: string) {\n    if (this.readyState !== ReadyState.OPEN) {\n      // connection already closed. ignore.\n      return;\n    }\n\n    this.readyState = ReadyState.CLOSING;\n\n    if (code !== undefined) {\n      this._ref.ws.end(code, data);\n\n    } else {\n      this._ref.ws.close();\n    }\n  }\n\n  public close(code?: number, data?: string) {\n    logger.warn('DEPRECATION WARNING: use client.leave() instead of client.close()');\n    try {\n      throw new Error();\n    } catch (e) {\n      logger.info(e.stack);\n    }\n    this.leave(code, data);\n  }\n\n  public toJSON() {\n    return { sessionId: this.sessionId, readyState: this.readyState };\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAyB;AAGzB,kBAAmG;AACnG,oBAAuB;AAEhB,MAAM,0BAA0B,cAAAA,QAAa;AAAA,EAClD,YAAmB,IAAgC;AACjD,UAAM;AADW;AAAA,EAEnB;AACF;AAEO,IAAK,aAAL,kBAAKC,gBAAL;AACL,EAAAA,wBAAA,gBAAa,KAAb;AACA,EAAAA,wBAAA,UAAO,KAAP;AACA,EAAAA,wBAAA,aAAU,KAAV;AACA,EAAAA,wBAAA,YAAS,KAAT;AAJU,SAAAA;AAAA,GAAA;AAOL,MAAM,iBAAmC;AAAA,EAQ9C,YACS,IACA,MACP;AAFO;AACA;AART,SAAO,QAAqB,wBAAY;AACxC,SAAO,aAAqB;AAC5B,SAAO,oBAA2B,CAAC;AAQjC,SAAK,YAAY;AAEjB,SAAK,GAAG,SAAS,MAAM,KAAK,aAAa,cAAiB;AAAA,EAC5D;AAAA,EAEA,IAAI,MAAM;AAAE,WAAO,KAAK;AAAA,EAAM;AAAA,EAC9B,IAAI,IAAI,MAAyB;AAC/B,SAAK,OAAO;AACZ,SAAK,aAAa;AAAA,EACpB;AAAA,EAEO,UAAU,MAAW,OAA4B,SAAwB;AAC9E,kCAAa,iCAAiC,KAAK,WAAW,MAAM,KAAK;AAEzE,SAAK;AAAA,MACH,4BAAgB,IAAI,qBAAS,iBAAiB,MAAM,QAAW,KAAK;AAAA,MACpE;AAAA,IACF;AAAA,EACF;AAAA,EAEO,KAAK,eAAoB,kBAAuC,SAAwB;AAC7F,kCAAa,2BAA2B,KAAK,WAAW,eAAe,gBAAgB;AAEvF,SAAK;AAAA,MACF,yBAAyB,uBACtB,4BAAgB,qBAAS,kBAAkB,aAAa,IACxD,4BAAgB,IAAI,qBAAS,WAAW,eAAe,gBAAgB;AAAA,MAC3E;AAAA,IACF;AAAA,EACF;AAAA,EAEO,WAAW,MAAyB,SAAwB;AAEjE,QAAI,SAAS,gBAAgB;AAC3B,WAAK,qBAAqB,KAAK,CAAC,MAAM,SAAS,CAAC;AAChD;AAAA,IACF;AAEA,QAAI,KAAK,UAAU,wBAAY,SAAS;AAItC,WAAK,kBAAkB,KAAK,IAAI;AAChC;AAAA,IACF;AAEA,SAAK,IAAI,MAAM,OAAO;AAAA,EACxB;AAAA,EAEO,IAAI,MAAyB,SAAwB,IAA4B;AAEtF,QAAI,KAAK,eAAe,cAAiB;AACvC;AAAA,IACF;AAEA,SAAK,KAAK,GAAG,KAAK,IAAI,WAAW,IAAI,GAAG,MAAM,KAAK;AAAA,EACrD;AAAA,EAEO,MAAM,MAAc,UAAkB,IAAI,IAA4B;AAC3E,SAAK,IAAI,4BAAgB,qBAAS,OAAO,MAAM,OAAO,CAAC;AAIvD,eAAW,IAAI,CAAC;AAAA,EAClB;AAAA,EAEO,MAAM,MAAe,MAAe;AACzC,QAAI,KAAK,eAAe,cAAiB;AAEvC;AAAA,IACF;AAEA,SAAK,aAAa;AAElB,QAAI,SAAS,QAAW;AACtB,WAAK,KAAK,GAAG,IAAI,MAAM,IAAI;AAAA,IAE7B,OAAO;AACL,WAAK,KAAK,GAAG,MAAM;AAAA,IACrB;AAAA,EACF;AAAA,EAEO,MAAM,MAAe,MAAe;AACzC,uBAAO,KAAK,mEAAmE;AAC/E,QAAI;AACF,YAAM,IAAI,MAAM;AAAA,IAClB,SAAS,GAAP;AACA,yBAAO,KAAK,EAAE,KAAK;AAAA,IACrB;AACA,SAAK,MAAM,MAAM,IAAI;AAAA,EACvB;AAAA,EAEO,SAAS;AACd,WAAO,EAAE,WAAW,KAAK,WAAW,YAAY,KAAK,WAAW;AAAA,EAClE;AACF;",
  "names": ["EventEmitter", "ReadyState"]
}
